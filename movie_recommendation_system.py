# -*- coding: utf-8 -*-
"""Movie_Recommendation_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IJQjil470UVGwZeis3Ri590tKsynVkHF

Importing the dependencies
"""

import numpy as np
 import pandas as pd
 import difflib   #close match of the movie name given by the user, for spelling mistake and all
 from sklearn.feature_extraction.text import TfidfVectorizer
 from sklearn.metrics.pairwise import cosine_similarity

"""Data Collection and Pre-Processing"""

#loading the data from csv file to a pandas dataframe
movies_data = pd.read_csv('/content/movies.csv')

#printing the first five rows of the dataframe
movies_data.head()

#number of rows and columns in the dataset
movies_data.shape

#selecting the relevant features for recommendations

selected_features = ['genres', 'keywords','tagline','cast','director']
print(selected_features)

# replacing the null values with null string
for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('')

# combining all the five selected features

combined_features = movies_data['genres']+ ' '+ movies_data['keywords'] + ' '+ movies_data['tagline']+' '+  movies_data['cast'] +' '+ movies_data['director']

print(combined_features)

#converting the text data to feature vectors

vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

"""Cosine Similarity"""

#getting a similarity scores using cosine similarity

similarity = cosine_similarity(feature_vectors)

print(similarity)

print(similarity.shape)

# getting a movie name from the user

movie_name = input('Enter the name of the movie : ')

# creating a list with all the movies given in the dataset

list_of_all_titles = movies_data['title'].tolist()
# print(list_of_all_titles)

#finding the close match for the movie name given by the user

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

print(find_close_match)

close_match = find_close_match[0]
print(close_match)

# finding the index of the movie with title

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

"""we found the index because similarity is having index value and the similarity."""

#getting a list of similar movies
similarity_score= list(enumerate(similarity[index_of_the_movie]))

# we are taking the iron man movie and find the similarity of all the movies. So the movies which are similar to iron man have higher value of the similarity score

# print(similarity_score)

"""the first value is the index and second is the similarity between movie at that index"""

len(similarity_score)

#sorting the movies based on their similarity score

sorted_similar_movies = sorted(similarity_score, key= lambda x:x[1], reverse= True)
# print(sorted_similar_movies)

# lamba x:x[1] means x is representing similarity score and x[1] means second element of each set eg.  0.033570748780675445

#print the name of similar movies based on the index

print('Movies suggested for you: \n')

i=1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index == index]['title'].values[0]
  if(i<=30):
    print(i, '.', title_from_index)
    i+=1

"""#Movies Recommendation system"""

#incorporating at one place
movie_name = input('Enter the name of the movie : ')

list_of_all_titles = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

close_match = find_close_match[0]

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score= list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key= lambda x:x[1], reverse= True)

print('Movies suggested for you: \n')

i=1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index == index]['title'].values[0]
  if(i<=30):
    print(i, '.', title_from_index)
    i+=1